Danning Yu
305087992

Throughout this lab, I used lnxsrv05.

1. I ran git clone https://git.savannah.gnu.org/git/diffutils.git, which was
taken from the GNU diff utiliies website.

2. I then entered the newly created diffutils folder and checked what changes
had been made:
cd diffutils
git log > git-log.txt

3. To generate a list of tags, I used the following command:
git tag > git-tags.txt

4. To find the commit's hash, I used:
cat git-log.txt | grep -C5 'maint: quote'

I found the hash was 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f, so I used the
following command to generate a patch:
git format-patch -1 62ca21c8c1a5aa --stdout > quote-patch.txt

5. I checked out version 3.0 by using the following command:
git checkout tags/v3.0

6. I then made the patch using:
patch -p1 < quote-patch.txt

The following errors were returned:
can't find file to patch at input line 62
...
patching file README
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej
patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej
patching file TODO
patching file cfg.mk
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej
patching file doc/diagmeet.note
can't find file to patch at input line 249
...
can't find file to patch at input line 262
...
patching file src/diff.c
...
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
...
3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej
patching file src/diff3.c
...
Hunk #6 FAILED at 433.
...
1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej

7. git status returns the following output:
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   NEWS
        modified:   README
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff.h
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/system.h
        modified:   src/util.c
        modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        NEWS.orig
        README-hacking.orig
        README-hacking.rej
        README.orig
        README.rej
        cfg.mk.orig
        cfg.mk.rej
        git-log.txt
        git-tags.txt
        ms/config.site.orig
        quote-patch.txt
        src/cmp.c.orig
        src/context.c.orig
        src/diff.c.orig
        src/diff.c.rej
        src/diff.h.orig
        src/diff3.c.orig
        src/diff3.c.rej
        src/dir.c.orig
        src/sdiff.c.orig
        src/system.h.orig
        src/util.c.orig
        tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")

8. Using emacs to open a file (such as NEWS), I ran the following commands to
learn about what they do:
C-x v = (vc-diff): This creates another window that compares the current file
to the same file that I started with. It essentially works like diff. More
precisely, the online documentation states that it compares the work files
in the current version control fileset to the starting versions. 
C-x v u (vc-revert): This gives me the option of reverting all my changes so
that the file returns to its original version. More precisely, the online
documentation says it reverts the work file in the current version control
fileset to the last revision.

While in the *vc-diff* buffer, C-h m displays additional commands that can
be used.
C-c C-a (diff-apply-hunk): This applys a certain diff-hunk to the target file.
C-u can be added to revert the hunk (aka undo the change).
C-c C-c (diff-goto-source): This goes to the specific line in the new source
file that corresponds to a hunk. A prefix can be added to jump to the source
line in the old file instead.

9. I reverted the changes by opening the file, typing C-x v u, and then yes
when asked if I wanted to discard changes. I did this for NEWS, README, TODO,
doc/diagmeet.note, ms/config.bat, ms/config.site, po/en.po, src/system.h,
and tests/help-version.

To undo the changes to any non-character string constants, I opened each
.c file, used C-x v = to examine where changes occurred, and if they needed
to be reverted, used C-u C-c C-a. 

Completley reverted:
src/analyze.c
src/context.c
src/ifdef.c
src/io.c
src/side.c

Changes remain:
src/cmp.c
src/diff.c
src/diff3.c
src/dir.c
src/sdiff.c
src/util.c

10. THe files that contained rejected changes are as follows:
diff3.c.rej
diff.c.rej

I opened these files using emacs, and then opened their corresponding C file
in the same frame using C-x 4 f [diff3.c or diff.c], and then made the
appropriate changes from ` to ' for any constant string literals.

11. I removed all the untracked files by moving them to a different directory
using mv, and then used git clean -n to see which files would be removed:

Would remove NEWS.orig
Would remove README-hacking.orig
Would remove README-hacking.rej
Would remove README.orig
Would remove README.rej
Would remove cfg.mk.orig
Would remove cfg.mk.rej
Would remove git-log.txt
Would remove git-tags.txt
Would remove ms/config.site.orig
Would remove quote-patch.txt
Would remove src/cmp.c.orig
Would remove src/context.c.orig
Would remove src/diff.c.orig
Would remove src/diff.c.rej
Would remove src/diff.h.orig
Would remove src/diff3.c.orig
Would remove src/diff3.c.rej
Would remove src/dir.c.orig
Would remove src/sdiff.c.orig
Would remove src/system.h.orig
Would remove src/util.c.orig
Would remove tests/help-version.orig

These are all the unmodified filess, or files that were created during this
lab, so I ran git clean -f to remove them.

12. Running git status gives the following output:
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   src/cmp.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/sdiff.c
        modified:   src/util.c

I then used the command git diff > quote-3.0-patch.txt to create a new patch file.

13. I first read the README-hacking file to figure out how to build the
modified version of Diffutils. IT says to run the following commands:
./bootstrap
./configure
make
make check

The first three commands ran fine, but make check returned a large amount of errors:
...
make[3]: Entering directory '/w/home.23/ma/ugrad/danning/cslab/diffutils/tests'
/bin/sh: /bin/sh: cannot execute binary file
Makefile:1309: recipe for target 'basic.log' failed
make[3]: *** [basic.log] Error 126
make[3]: Leaving directory '/w/home.23/ma/ugrad/danning/cslab/diffutils/tests'
Makefile:1288: recipe for target 'check-TESTS' failed
make[2]: *** [check-TESTS] Error 2
make[2]: Leaving directory '/w/home.23/ma/ugrad/danning/cslab/diffutils/tests'
Makefile:1403: recipe for target 'check-am' failed
make[1]: *** [check-am] Error 2
make[1]: Leaving directory '/w/home.23/ma/ugrad/danning/cslab/diffutils/tests'
Makefile:1016: recipe for target 'check-recursive' failed
make: *** [check-recursive] Error 1

I tried doing the same ./bootstrap, ./configure, make, and make check on a
clean (unmodified) v3.0 branch of Diffutils, and similar errors were returned.

14. I copied all the modified source code into a folder called diffutils-3.0-patch:
cd ..
mkdir diffutils-3.0-patch
cp -r diffutils/src/*.c diffutils-3.0-patch

To get a fresh version of the v3.0 branch of Diffutils, I ran the following commands:
mkdir diffutils-fresh
cd diffutils-fresh
git clone https://git.savannah.gnu.org/git/diffutils.git
git checkout tags/v3.0
cd ..
mkdir diffutils-3.0
cp -r diffutils-fresh/diffutils/src/*.c diffutils-3.0

Then, to compare the two sets of source codes, I used the following command:
diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch > quote-3.0-test.txt

15. I ran the following command to compare quote-3.0-test.txt and quote-3.0-patch.txt:
diff quote-3.0-test.txt diffutils/quote-3.0-patch.txt > differences.txt

Examining differences.txt shows that basically the only changes are from ` to ', as expected.
