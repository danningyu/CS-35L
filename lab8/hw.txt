Danning Yu
305087992

To generate a key-pair, I used gpg2:
gpg2 --gen-key

It gave the following output:
gpg: key 34D550A5 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   2048R/34D550A5 2019-11-23
      Key fingerprint = 2E71 6F4D F1AC 6541 6A13  7E35 D6D9 2CB2 34D5 50A5
uid                  Danning Yu (Key 1) <danningyu@ucla.edu>
sub   2048R/DE55498F 2019-11-23

To export the key:
gpg2 --armor --export danningyu@ucla.edu > hw-pubkey.asc

To transfer the eeprom file from BeagleBone to the Linux server (ssh'd into
BeagleBone already via PuTTY).
scp -r /sys/bus/i2c/devices/0-0050/eeprom danning@lnxsrv07.seas.ucla.edu:eeprom

Generating deatached signature for eeprom using the key previously generated:
gpg2 --clearsign eeprom

This command returned the following messages:
2048-bit RSA key, ID 34D550A5, created 2019-11-23
gpg: input line longer than 19995 characters

Then I ran the follow command to create the deatched sign:
gpg2 --detach-sign eeprom

--------------------
Homework Questions

1. If other teams had been monitoring all the bytes that went across the
network, the resulting transmissions are still secure because we always used
SSH to log in to each other's BeagleBone hosts. SSH encrypts transmissions so
they can only be decrypted by the server and client. Anyone monitoring the
network would only be able to see the encrypted data being sent over the
network, and they cannot decrypt it because they do not have private key.

If case (1) occurred, the connection would still be secure because when I set
the connection with my partner, I made sure to set up key-based authentication
and then add my private to the authentication agent, which meant that when I
tried to log in to this server in the future, I would not have to type in my
password again. Thus, if my keyboard was tapped after all of this was
completed, the network would still be secure because they would never obtain
my password.

If case (2) occurred, the connection would not be secure because they could
access the private keys stored on the USB device, thus allowing them to
decrypt anything encryped with my public key. The .ssh folder on the USB
would contain all public and private keys, and they would have access to all
of them, thus allowing them to decrypt messages sent on the network.

2. The gpg2 --verify command doesn't really verify that I created the file
because when creating the key, I could have put in anyone's name and email,
thus linking it to that key. All gpg2 --verify does is compare the file
matches with the detached signature. Thus, if someone intercepts the file,
modifies it, and then generates a new detached signature using their own key,
running gpg2 --verify on that file will show the person who intercepted the
file as being the creator of the file (or my name if they choose to
impersonate me). To fix this issue, we need to use a 3rd party, called a
certificate authority, to certify that a certain person owns a particular
public key. Then, whoever receives the file can use the appropriate public
key (mine) to verify the file was created by me. If it was not, or it was
tampered with in transit, then using my public key with gpg2 --verify will
result in the detached signature and target file not matching, as desired.