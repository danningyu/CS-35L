Danning Yu
305087992
Homework

1.1
1. emacs exer1.html Enter
2. C-s H T M L
3. C-s s c a v e n g e r M-b
4. C-s s e l f - r e f e r e n t i a l M-b M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. If arrow keys were used (I did not use them): use C-a and C-e to move to start/end of lines, C-n and C-p to move down/up lines, M-b and M-f to move by words, and C-f and C-b to move right/left by characters. Also, the length of the search queries can probably be decreased ("scaven" would probably work as well as "scavenger")
9. No
10. C-x C-c

1.2
1. emacs exer2.html Enter
2. M-g M-g 19 C-k (the commnent is actually on the 19th line)
3. C-s D E L E T E C-a C-k
4. C-s w i k i p C-s C-u 2 M-z > C-u -2 M-z <
5. C-s < ! - - M-z > Enter C-u - 1 M-z < Enter C-s < ! - - C-a C-k C-u 4 M-z > Enter C-s < ! - - C-a C-k

1.3
1. emacs exer3.html Enter
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter y y
3. M-< M-% U T F - 8 Enter U S - A S C I I Enter y
4. M-x r e p l a c e - r e g e x p Enter [ ^ [ : a s c i i : ] ] Enter Enter
5. M-< C-s < / o l > C-o
6. C-x C-s C-x C-c

1.4
1. cat SP exer2.html SP exer2.diff SP >exer4.html Enter
2. emacs exer4.html Enter
3. M-> C-b C-p C-@ C-e C-w M-g M-g 432 Enter C-y
4. C-s < ! C-a C-f C-@ C-e C-w M-g M-g 18 Enter C-y
C-s < ! - - C-a C-f C-@ C-e C-w M-g M-g 129 Enter C-y
C-s < ! - - C-s C-a C-f C-@ C-n C-n C-n C-f C-x r d C-@ C-p C-p C-p C-w M-g M-g 368 Enter C-y
C-s < ! - - C-s C-a C-@ C-n C-n C-n C-n C-n C-f C-x r d C-@ C-p C-p C-p C-p C-p C-w M-g M-g 416 Enter C-k C-y
5. C-s - - - C-a C-@ M-> C-w
6. C-x u
7. - - > C-r - - - Enter < ! - -
8. M-x r e p l a c e - s t r i n g Enter < o l > Enter < o L >
   5 occurrences.

1.5
1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. M-x c d Enter j u n k Enter C-x C-f h e l l o . c Enter [typed in code]
3. M-x c o m p i l e Enter DEL DEL DEL DEL DEL DEL DEL g c c   h e l l o . c Enter
4. C-x b h e l l o - o ut Enter C-u M-! ~ / j u n k / a . o u t Enter
5. C-a C-@ C-e C-w C-x C-f ~ / k e y 1 . t x t Enter C-y EOF on input

1.6
1. C-x b Enter
2. ( r a n d o m  " 3 0 5 - 0 8 7 - 9 9 2 ") C-j, gives -420174761930626628
3. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) ) C-j
4. -786173911721529491
5. M-: ( * x y ) Enter, gives output in decimal, octal, and hexadecimal, while evaluating it in the buffer only gives output in decimal. The value outputted is the same.
6. No, they are not truly random. They are generated by an algorithm that is specially designed to look random (pseudo-random). This was found by looking at the documentation for (random).
7. Looking at the emacs lisp documentation for random, we find that most-positive-fixnum and most-negative-fixnum represent the maximum and minimum values, respectively. The largest number is 2^61-1 and the most negative is -2^61. Thus, integers are represented by 62 bits. Multiplying two of them by each other results in 2^(2*62) = 2^124 possible values. To find the number of combinations that result in overflow, which results in an incorrect answer, we will count the number of combinations that don't result in overflow, and then 1 minus this value divided by 2^124 is the probability of a wrong answer. We will do this analysis assuming the numbers are intepreted as unsigned, which should yield the same results as signed numbers.

If x = 0, y can be any value: 2^62 answers.
If x = 1, y can be any value: 2^62 answers.
If x = 2, the number of possible values for y is approximately half: (2^62)/2 permissible values.
If x = 3, the number of possible values is approximately divided by three: (2^62)/3
And so on...

Add up the number of permissible values, divide by 2^124, and then subtract this value from 1 to get the probability of overflow.