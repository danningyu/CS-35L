Danning Yu
305087992
Homework:

1.1
1. emacs exer1.html Enter
2. C-s H T M L
3. C-s s c a v e n g e r M-b
4. C-s s e l f - r e f e r e n t i a l M-b M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. Use C-a and C-e to move to start/end of lines, C-n and C-p to move down/up lines, M-b and M-f to move by words, and C-f and C-b to move right/left by characters.
9. No
10. C-x C-c

1.2
1. emacs exer2.html Enter
2. M-g M-g 19 C-k
3. C-s D E L E T E C-a C-k
4. C-s w i k i p C-s C-u 2 M-z > C-u -2 M-z <
5. C-s < ! - - M-z > Enter C-u - 1 M-z < Enter C-s < ! - - C-a C-k C-u 4 M-z > Enter C-s < ! - - C-a C-k

1.3
1. emacs exer3.html Enter
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter y y
3. M-< M-% U T F - 8 Enter U S - A S C I I Enter y
4. M-x r e p l a c e - r e g e x p Enter [ ^ [ : a s c i i : ] ] Enter Enter
5. M-< C-s < / o l > C-o
6. C-x C-s C-x C-c

1.4
1. cat SP exer2.html SP exer2.diff SP >exer4.html Enter
2. emacs exer4.html Enter
3. M-> C-b C-p C-@ C-e C-w M-g M-g 432 Enter C-y
4. C-s < ! C-a C-f C-@ C-e C-w M-g M-g 18 Enter C-y
C-s < ! - - C-a C-f C-@ C-e C-w M-g M-g 129 Enter C-y
C-s < ! - - C-s C-a C-f C-@ C-n C-n C-n C-f C-x r d C-@ C-p C-p C-p C-w M-g M-g 368 Enter C-y
C-s < ! - - C-s C-a C-@ C-n C-n C-n C-n C-n C-f C-x r d C-@ C-p C-p C-p C-p C-p C-w M-g M-g 416 Enter C-k C-y
5. C-s - - - C-a C-@ M-> C-w
6. C-x u
7. - - > C-r - - - Enter < ! - -
8. 5 occurrences. M-x r e p l a c e - s t r i n g Enter < o l > Enter < o L >

1.5
1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. M-x c d Enter j u n k Enter C-x C-f h e l l o . c Enter [typed in code]
3. M-x c o m p i l e Enter DEL DEL DEL DEL DEL DEL DEL g c c   h e l l o . c Enter
4. C-x b h e l l o - o ut Enter C-u M-! ~ / j u n k / a . o u t Enter
5. C-x C-f  EOF on input

1.6
1. C-x b Enter
2. ( r a n d o m  " 3 0 5 - 0 8 7 - 9 9 2 ") C-j, gives -420174761930626628
3. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) ) C-j
4. -786173911721529491
5. M-: ( * x y ) Enter, gives output in decimal, octal, and hexadecimal, while evaluating it in the buffer only gives output in decimal.
6. No, they are not truly random. They are generated by an algorithm that is specially designed to look random (pseudo-random).
7. Let the width of the integer be n. Then there are 2^n possible values that x and y can take on. Thus, the product, x*y, as 2^(2n) possible values. Of these values, the product will not overflow if x*y < 2^n (that is, it takes n bits or less to represent x*y). The number of ways this can happen is the summation of (2^i)*(2^(30-i)), where i ranges from 0 to 30. The complement of this is the number of overflow cases, and so thus, the probability of overflow is (1-a)/b, where a = summation of (2^i)*(2^(30-i)), from i=0 to i=30, and b = 2^(2n). 
