Danning Yu
305087992

1. I used the following commands:
vim simpgmp.c
(copy pasted the text from the website to the file)
gcc -o simpgmp -lgmp simpgmp.c

2.
./simpgmp 24 outputted 16,777,216
./simpgmp `./simpgmp 24`
The second command outputted a number that started with 1818 and ended with
7536, as expected.

3. Using ldd simpgmp gives:
	linux-vdso.so.1 =>  (0x00007ffda1bf9000)
        libgmp.so.10 => /lib64/libgmp.so.10 (0x00007f804dd89000)
        libc.so.6 => /lib64/libc.so.6 (0x00007f804d9bb000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f804e001000)
Thus, simpgmp is using the linux-vdso.so.1, libgmp.so.10, libc.so.6, and
ld-linux-x86-64.so.2 libraries.

4. Using the command strace ./simpgmp 24 gives the following output:
execve("./simpgmp", ["./simpgmp", "24"], [/* 42 vars */]) = 0
brk(NULL)                               = 0x1b47000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f301395d000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=158981, ...}) = 0
mmap(NULL, 158981, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f3013936000
close(3)                                = 0
open("/lib64/libgmp.so.10", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\304\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=495720, ...}) = 0
mmap(NULL, 2584736, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f30134c5000
mprotect(0x7f301353b000, 2093056, PROT_NONE) = 0
mmap(0x7f301373a000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x75000) = 0x7f301373a000
close(3)                                = 0
open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P&\2\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=2156072, ...}) = 0
mmap(NULL, 3985888, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f30130f7000
mprotect(0x7f30132ba000, 2097152, PROT_NONE) = 0
mmap(0x7f30134ba000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c3000) = 0x7f30134ba000
mmap(0x7f30134c0000, 16864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f30134c0000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f3013935000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f3013933000
arch_prctl(ARCH_SET_FS, 0x7f3013933740) = 0
mprotect(0x7f30134ba000, 16384, PROT_READ) = 0
mprotect(0x7f301373a000, 8192, PROT_READ) = 0
mprotect(0x600000, 4096, PROT_READ)     = 0
mprotect(0x7f301395e000, 4096, PROT_READ) = 0
munmap(0x7f3013936000, 158981)          = 0
brk(NULL)                               = 0x1b47000
brk(0x1b68000)                          = 0x1b68000
brk(NULL)                               = 0x1b68000
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 9), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f301395c000
write(1, "16777216\n", 916777216
)               = 9
exit_group(0)                           = ?
+++ exited with 0 +++

Thus, I see that simpgmp makes the following system calls that relate to
dynamic linking: open, fstat, mmap, read, mprotect, close, and munmap.
Other system calls executed by the program but not directly related to linking
are brk, write, arch_prctl, and access. Execve is used to start simpgmp.

mprotect,  write, and exit_group. There are 3 groups of function
calls that have to do with dynamic linking:

Group 1:
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=158981, ...}) = 0
mmap(NULL, 158981, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fbb8da4c000
close(3)                                = 0

This serves to open the library ld.so.cache, find its file size, and then
allocate memory for it. It is closed when the program is done using it.

Group 2:
open("/lib64/libgmp.so.10", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\304\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=495720, ...}) = 0
mmap(NULL, 2584736, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fbb8d5db000
mprotect(0x7fbb8d651000, 2093056, PROT_NONE) = 0
mmap(0x7fbb8d850000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x75000) = 0x7fbb8d850000
close(3)                                = 0

This serves to open the library libgmp.so.10, and then data is read in from
it, its file size is analyzed, memory is allocated for it, and it is
protected from it being overwritten access with mprotect. 832 bytes are read
in because that is the size of the ELF header of the file. It is closed when
the program is done using it.

Group 3:
open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P&\2\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=2156072, ...}) = 0
mmap(NULL, 3985888, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fbb8d20d000
mprotect(0x7fbb8d3d0000, 2097152, PROT_NONE) = 0
mmap(0x7fbb8d5d0000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c3000) = 0x7fbb8d5d0000
mmap(0x7fbb8d5d6000, 16864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fbb8d5d6000
close(3)                                = 0

This serves to open the library libc.so.6, reads in data from it, allocates
memory, and protects the data from being accessed. It is very similar to what
was done with the libgmp.so.10 library. It is then closed when the program is
done using it.

5. I ran ls /usr/bin | awk '(NR-305087992)%251 == 0' and it outputted:
a2p
collateindex.pl
fc-pattern
gvfs-mime
kinfocenter
mkfifo
pango-querymodules-64
qdbuscpp2xml
stap-prep
wmf2x

6. I wrote a shell script to run ldd on each command:
#!/bin/bash
#program name: analyzeCmd

read -d '' allCommands
for c in $allCommands; do
	echo 'ldd for' "$c"
	path="/usr/bin/"
	path+="$c"
	ldd "$path"
done

Use the shell script in the following way:
ls /usr/bin | awk '(NR-305087992)%251 == 0' | ./analyzeCmd

I then analyzed the output and found that for a2p, fc-pattern, kinfocenter,
mkfifo, pango-querymodeuls64, qdbuscpp2xml, and wmf2x, ldd was able to work
normally. For collateindex.p1, gvfs-mime, and stap-prep, it returned the
error "not a dynamic executable", which occurs because these 3 programs are
shell scripts, not regular executables.

7. Using the following commands:
export LC_ALL='C'
ls /usr/bin | awk '(NR-305087992)%251==0' | ./analyzeCmd | grep .so. | \
sed "s/[(].*[)]//g" |  sed "s/[=][>].*//g" | sed 's/^[ \t]*//g' | sort -u

I got the following list of libraries:
/lib64/ld-linux-x86-64.so.2 
libICE.so.6 
libQtCore.so.4 
libQtDBus.so.4 
libQtGui.so.4 
libQtNetwork.so.4 
libQtSvg.so.4 
libQtXml.so.4 
libSM.so.6 
libX11.so.6 
libXau.so.6 
libXcursor.so.1 
libXext.so.6 
libXfixes.so.3 
libXft.so.2 
libXi.so.6 
libXinerama.so.1 
libXpm.so.4 
libXrandr.so.2 
libXrender.so.1 
libXtst.so.6 
libacl.so.1 
libattica.so.0.4 
libattr.so.1 
libbz2.so.1 
libc.so.6 
libcap.so.2 
libcom_err.so.2 
libcrypt.so.1 
libcrypto.so.10 
libdbus-1.so.3 
libdbusmenu-qt.so.2 
libdl.so.2 
libdw.so.1 
libelf.so.1 
libexpat.so.1 
libfam.so.0 
libffi.so.6 
libfontconfig.so.1 
libfreebl3.so 
libfreetype.so.6 
libgcc_s.so.1 
libgcrypt.so.11 
libglib-2.0.so.0 
libgobject-2.0.so.0 
libgpg-error.so.0 
libgssapi_krb5.so.2 
libgthread-2.0.so.0 
libjpeg.so.62 
libk5crypto.so.3 
libkcmutils.so.4 
libkdecore.so.5 
libkdeui.so.5 
libkeyutils.so.1 
libkfile.so.4 
libkio.so.5 
libkrb5.so.3 
libkrb5support.so.0 
liblz4.so.1 
liblzma.so.5 
libm.so.6 
libnepomuk.so.4 
libnepomukquery.so.4 
libnepomukutils.so.4 
libnsl.so.1 
libpcre.so.1 
libpng15.so.15 
libpthread.so.0 
libqca.so.2 
libresolv.so.2 
librt.so.1 
libselinux.so.1 
libsolid.so.4 
libsoprano.so.4 
libsopranoclient.so.1 
libssl.so.10 
libstdc++.so.6 
libstreamanalyzer.so.0 
libstreams.so.0 
libsystemd.so.0 
libudev.so.1 
libutil.so.1 
libuuid.so.1 
libwmf-0.2.so.7 
libwmflite-0.2.so.7 
libxcb.so.1 
libxml2.so.2 
libz.so.1 
linux-vdso.so.1 
