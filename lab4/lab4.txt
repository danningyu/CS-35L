Danning Yu
305087992

Got the tar file using wget and unzip it:
wget http://web.cs.ucla.edu/classes/fall19/cs35L/assign/coreutils-with-bug.tar.gz
tar -xzvf coreutils-with-bug.tar.gz

Then navigate to unzipped folder and install coreutils:
mkdir cubug
cd coreutils-with-bug
./configure --prefix=[aboslute path...]/cubug
make
make install

When make is run, it displays an error: that there are conflicting types for
futimens. The same error pops up when make install is run.

To download and apply patch to fix this issue:
wget http://web.cs.ucla.edu/classes/fall19/cs35L/assign/coreutils.diff
patch -p0 < coreutils.diff

-p0 option was used so that the file path is not modified.

Then remake the installation:
make

There is no longer an error about futimens because the patch file renames
futimens to coreutils_futimens. (Found this by examining the diff file).
It also does the same for a function called tee: renames to coreutils_tee.
As a result, there's no longer a name conflict.

Because the installation failed earlier, it didn't actually install
coreutils into cubug. Thus, we need to redo the installation steps.
./configure --prefix=[aboslute path...]/cubug
make
make install

Reproducing the error:
tmp=$(mktemp -d)
cd $tmp
touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
touch now
sleep 1
touch now1
TZ=UTC0 ~/cslab/cubug/bin/ls -lt --full-time wwi-armistice-cs35L now now1

Output:
-rw-r--r-- 1 danning maugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice-cs35L
-rw-r--r-- 1 danning maugrad 0 2019-10-22 04:32:16.745623119 +0000 now1
-rw-r--r-- 1 danning maugrad 0 2019-10-22 04:32:08.200360731 +0000 now

wwi-armistice-cs35L should be the last line of output, but it is erroneously
the first.

To figure out what's causing this error, I used gdb:
gdb ~/cubug/bin/ls

To find a function to break on:
info functions

For ls.c, I found the functions compare_ctime and compare_mtime, which I
think could cause the problem. Thus, I set breakpoints at both locations.
break compare_ctime
break compare_mtime

Then, I ran the command:
run -lt --full-time

It stopped on compare_mtime, and by stepping through compare_mtime, I found
that it calls another function, timespec_cmp, so I added a breakpoint for
that too. Then I ran the program over from the start.

By stepping through code one line at a time, I found the following code in
timespec_cmp:
int diff = a.tv_sec - b.tv_sec;
return diff ? diff : a.tv_nsec - b.tv_nsec;

I would guess overflow is occurring in the first line when subtraction occurs.
To test this, I used info local to monitor the value of diff as I stepped
through the program. At first, it was a positive value, but the last value
of diff before the comparisons finshed was -7, which makes no sense.

A potential fix to this program is just to compare the times directly and
return an appropriate value based on the comparison. GDB tells me that
these lines of code are in .../lib/timespec.h, lines 48-49.

Editing timespec.h: make a copy first
cd ~/coreutils-with-bug
cp lib/timespec.h timespec.h 
emacs timespec.h

The function timespec_cmp is given below:
timespec_cmp (struct timespec a, struct timespec b)
{
  int diff = a.tv_sec - b.tv_sec;
  return diff ? diff : a.tv_nsec - b.tv_nsec;
}


Following the comment above the function, I modified it to the following:
timespec_cmp (struct timespec a, struct timespec b)
{
  if(a.tv_sec > b.tv_sec)
    return 1;
  else if(a.tv_sec < b.tv_sec)
    return -1;
  return a.tv_nsec - b.tv_nsec;
}

Then, create the diff file:
diff -u lib/timespec.h timespec.h > lab4.diff

Open file in emacs, and change the 2nd line from timespec.h to lib/timespec.h
so that when the diff file is applied, it'll modify the right file.
Then, used C-x 4 a to access the changelog, and added the following note:

2019-10-26  Danning Liu Yu  <danning@lnxsrv07.seas.ucla.edu>

* timespec.h (timespec_cmp): Fixed error where overflow can
        potentially occur if the difference between the times is very large.
        Replaced with direct comparison. Either -1 or 1 is returned
        depending on which timestamp is bigger. If they are equal with
        respect to their seconds value, return difference in nanoseconds.

Then apply the patch, using same procedure as before:
patch -p0 < lab4.diff
make

Then redo the same steps that displayed the bug, except this time use the
patched ls command in coreutils-with-bug. This produces the following output:

-rw-r--r-- 1 danning maugrad 0 2019-10-22 17:32:12.868193895 +0000 now1
-rw-r--r-- 1 danning maugrad 0 2019-10-22 17:32:06.902011230 +0000 now
-rw-r--r-- 1 danning maugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice-cs35L

The extremely old file now correctly appears at the bottom.

Creating wwi-armistice-cs35L, now, and now1 in my home directory and issuing
ls gives the following result:

-rw-r--r-- 1 danning maugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice-cs35L
-rw-r--r-- 1 danning maugrad 0 2019-10-22 17:34:42.812352000 +0000 now1
-rw-r--r-- 1 danning maugrad 0 2019-10-22 17:34:36.697785000 +0000 now

This indicates that the SEASnet ls does not work correctly either. In fact,
it exhibits a different issue, where the year 1918 incorrectly shows up as
2054. This is because when the file is created, the date is written as a
32-bit unsigned integer, but when it is read, ls interprets it as a 32-bit
signed integer, thus resulting in overflow.

